
#include "ctp/ThostFtdcMdApi.h"
#include "ctp/ThostFtdcTraderApi.h"
#include "ctp/quoteAdapter_CTP.h"
#include "ctp/tradeAdapter_CTP.h"

char mdFront[] = "tcp://140.207.238.1:41213";//生产
//char tradeFront[] = "tcp://140.207.238.1:41205";
char tradeFront[] = "tcp://180.168.212.239:41205";

int requestId = 0;

void ShowMdCommand(quoteAdapter_CTP * quoteAdapter, bool print = false){
	if (print){
		cout << "-----------------------------------------------" << endl;
		cout << " [1] ReqUserLogin              -- 登录" << endl;
		cout << " [2] SubscribeMarketData       -- 行情订阅" << endl;
		cout << " [0] Exit                      -- 退出" << endl;
		cout << "----------------------------------------------" << endl;
	}

	char instIdList[100];
	char exchange[100];

	int cmd;  cin >> cmd;
	switch (cmd){
	case 1: {
		quoteAdapter->login();
		break;
	}
	case 2: {
		cout << " 合约（逗号分隔多个合约） > "; cin >> instIdList;
		cout << " 交易所 > "; cin >> exchange;
		quoteAdapter->Subscribe(instIdList, exchange);
		break;
	}
	case 0: exit(0);
	}
	ShowMdCommand(quoteAdapter);
}

void test_md()
{
	quoteAdapter_CTP * quoteAdapter = new quoteAdapter_CTP("testQuoteAdapter", mdFront, "6010", "150100", "150100");
	//quoteAdapter_CTP * quoteAdapter = new quoteAdapter_CTP(mdFront, "8000", "150100", "040216");
	quoteAdapter->init();
	ShowMdCommand(quoteAdapter, true);
}

void ShowTraderCommand(tradeAdapterCTP* tradeAdapter, bool print = false){
	if (print){
		cout << "-----------------------------------------------" << endl;
		cout << " [1] ReqUserLogin              -- 登录" << endl;
		cout << " [2] ReqQryInstrument          -- 查询合约" << endl;
		cout << " [3] ReqQryTradingAccount      -- 查询资金" << endl;
		cout << " [4] ReqQryInvestorPosition    -- 查询持仓" << endl;
		cout << " [5] ReqOrderInsert            -- 报单" << endl;
		cout << " [6] ReqOrderAction            -- 撤单" << endl;
		cout << " [7] PrintOrders               -- 显示报单" << endl;
		cout << " [8] PrintTrades               -- 显示成交" << endl;
		cout << " [0] Exit                      -- 退出" << endl;
		cout << "----------------------------------------------" << endl;
	}

	char instrument[20];
	char priceType;
	char dir;
	char ComOffsetFlag;
	char ComHedgeFlag;
	double price;
	int volume;
	char tmCondition;
	char volCondition;
	int minVol;
	char contiCondition;
	double stopPrz;
	char forceCloseReason;
	int OrderRef;

	int cmd;  
	cin >> cmd;
	switch (cmd){
	case 1: {
		tradeAdapter->login();
		break;
	}

			//case 2: {
			//	cout << " 合约代码 > "; cin >> instId;
			//	p->ReqQryInstrument(instId); break;
			//}
	case 3:
	{
		tradeAdapter->queryTradingAccount();
		break;
	}
	case 4: {
		tradeAdapter->queryInvestorPosition();
		break;
	}
	case 5: {
		memset(instrument, 0, sizeof(instrument));
		cout << " 合约代码 > "; 
		cin >> instrument;
		cout << " 报单价格条件: " << endl;
		cout << "   任意价 1                " << endl;
		cout << "   限价   2                " << endl;
		cout << "   最优价 3                " << endl;
		cout << "   最新价 4                " << endl;
		cout << "   最新价浮动上浮1个ticks 5" << endl;
		cout << "   最新价浮动上浮2个ticks 6" << endl;
		cout << "   最新价浮动上浮3个ticks 7" << endl;
		cout << "   卖一价 8                " << endl;
		cout << "   卖一价浮动上浮1个ticks 9" << endl;
		cout << "   卖一价浮动上浮2个ticks A" << endl;
		cout << "   卖一价浮动上浮3个ticks B" << endl;
		cout << "   买一价 C                " << endl;
		cout << "   买一价浮动上浮1个ticks D" << endl;
		cout << "   买一价浮动上浮2个ticks E" << endl;
		cout << "   买一价浮动上浮3个ticks F" << endl;
		cout << "   五档价 G                " << endl;
		cout << "> ";  
		cin >> priceType;
		cout << " 买卖方向: 买(0) 卖(1) > "; 
		cin >> dir;
		cout << " 组合开平标志: " << endl;
		cout << "   开仓 0    " << endl;
		cout << "   平仓 1    " << endl;
		cout << "   强平 2    " << endl;
		cout << "   平今 3    " << endl;
		cout << "   平昨 4    " << endl;
		cout << "   强减 5    " << endl;
		cout << "   本地强平 6" << endl;
		cout << "> "; cin >> ComOffsetFlag;
		cout << " 组合投机套保标志: 投机(1) 套利(2) 套保(3) > "; cin >> ComHedgeFlag;
		cout << " 价格> "; cin >> price;
		cout << " 数量>"; cin >> volume;
		cout << " 有效期类型: " << endl;
		cout << "   立即完成否则撤销 1 " << endl;
		cout << "   本节有效 2         " << endl;
		cout << "   当日有效 3         " << endl;
		cout << "   指定日期前有效 4   " << endl;
		cout << "   撤销前有效 5       " << endl;
		cout << "   集合竞价有效 6     " << endl;
		cout << "> "; cin >> tmCondition;
		cout << " 成交量类型:  任何数量(1) 最小数量(2) 全部数量(3) >"; cin >> volCondition;
		cout << " 最小成交量 >"; cin >> minVol;
		cout << " 触发条件: " << endl;
		cout << "   立即 1                 " << endl;
		cout << "   止损 2                 " << endl;
		cout << "   止赢 3                 " << endl;
		cout << "   预埋单 4               " << endl;
		cout << "   最新价大于条件价     5 " << endl;
		cout << "   最新价大于等于条件价 6 " << endl;
		cout << "   最新价小于条件价     7 " << endl;
		cout << "   最新价小于等于条件价 8 " << endl;
		cout << "   卖一价大于条件价     9 " << endl;
		cout << "   卖一价大于等于条件价 A " << endl;
		cout << "   卖一价小于条件价     B " << endl;
		cout << "   卖一价小于等于条件价 C " << endl;
		cout << "   买一价大于条件价     D " << endl;
		cout << "   买一价大于等于条件价 E " << endl;
		cout << "   买一价小于条件价     F " << endl;
		cout << "   买一价小于等于条件价 H " << endl;
		cout << "> "; cin >> contiCondition;
		cout << " 止损价> "; cin >> stopPrz;
		cout << " 强平原因: " << endl;
		cout << "   非强平 0         " << endl;
		cout << "   资金不足 1       " << endl;
		cout << "   客户超仓 2       " << endl;
		cout << "   会员超仓 3       " << endl;
		cout << "   持仓非整数倍 4   " << endl;
		cout << "   违规 5           " << endl;
		cout << "   其它 6           " << endl;
		cout << "   自然人临近交割 7 " << endl;
		cout << "> "; cin >> forceCloseReason;

		tradeAdapter->OrderInsert(string(instrument), priceType, dir,
			ComOffsetFlag, ComHedgeFlag, price, volume, tmCondition,
			volCondition, minVol, contiCondition, stopPrz, forceCloseReason);
		break;
	}
	case 6: {
		cout << " OrderRef > "; cin >> OrderRef;
		tradeAdapter->cancelOrder(OrderRef);
		break;
	}
			//case 7: p->PrintOrders(); break;
			//case 8: p->PrintTrades(); break;
	case 0: exit(0);
	}
	ShowTraderCommand(tradeAdapter);
}

void test_order()
{
	athenathreadpoolPtr pThreadPool = athenathreadpoolPtr(new threadpool(4));
	tradeAdapterCTP* tradeAdapter = new tradeAdapterCTP("testTradeAdapter", tradeFront, 
		"8080", "20063232", "1234qwer", pThreadPool);
	tradeAdapter->init();
	ShowTraderCommand(tradeAdapter, true);
}
